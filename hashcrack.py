#!/usr/bin/python3

import bcrypt
import hashlib
import argparse
import concurrent.futures
from colorama import init, Fore

def crack_hash(tgtHash: str, tgtMthd: str, filePth: str) -> bool:
	GREEN = Fore.GREEN
	RED   = Fore.RED

	print(f'{GREEN} [+] ATTEMPTING TO DECODE HASH')
	with  open(filePth) as f:
		for line in f:
			if tgtMthd == "SHA1":
				line = line.strip()
				if hashlib.sha1(line.encode()).hexdigest() == tgtHash:
					print(f'{GREEN} [+] SUCCESS : DECODED HASH IS - {line}')
					return True
			elif tgtMthd == "SHA256":
				line = line.strip()
				if hashlib.sha256(line.encode()).hexdigest() == tgtHash:
					print(f'{GREEN} [+] SUCCESS : DECODED HASH IS - {line}')
					return True
			elif tgtMthd == "SHA512":
				line = line.strip()
				if hashlib.sha512(line.encode()).hexdigest() == tgtHash:
					print(f'{GREEN} [+] SUCCESS : DECODED HASH IS - {line}')
					return True
			elif tgtMthd == "MD5":
				line = line.strip()
				if hashlib.md5(line.encode()).hexdigest() == tgtHash:
					print(f'{GREEN} [+] SUCCESS : DECODED HASH IS - {line}')
					return True
			else:
				print(f'{RED} [-] UNKNOWN HASH METHOD')
				return False
			print(f'{RED} [-] FAILURE : HASH NOT DECODED')
	print(f'{RED} [-] FAILED TO DECODE HASH')
	return False

def main():
	init()
	
	parser = argparse.ArgumentParser(usage='Usage of cracker: --H <target hash> --M <encryption/decryption method> --F <password file>')
	parser.add_argument('--H', dest='tgtHash', type=str, help='specify target hash')
	parser.add_argument('--M', dest='tgtMthd', type=str, help='specify method for encryption/decryption')
	parser.add_argument('--F', dest='filePth', type=str, help='specify location of password list file')
	args = parser.parse_args()
	tgtHash = args.tgtHash
	tgtMthd = args.tgtMthd
	filePth = args.filePth

	if (tgtHash == None) | (tgtMthd == None) | (filePth == None):
		print(parser.usage)
		exit(0)

	with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
		future = executor.submit(crack_hash, tgtHash, tgtMthd, filePth)

if __name__ == '__main__':
	main()