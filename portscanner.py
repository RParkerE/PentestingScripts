#!/usr/bin/python3

import socket
import argparse
from scapy.all import *
import concurrent.futures

def grabBanner(tgtHost: str, tgtPort: int):
	try:
		serverTCPSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		serverTCPSocket.connect((tgtHost, tgtPort))
		serverTCPSocket.send(bytes('GET HTTP/2 \r\n', encoding='utf8'))
		banner = serverTCPSocket.recv(2048)
		print(f'[+] {tgtPort} | BANNER : ')
		print(banner.decode('utf8'))
	except Exception as e:  
		print(f'[-] {tgtPort} | BANNER ERROR : {e.upper()}')
	except socket.timeout:
		print(f'[-] {tgtPort} | TIMEOUT')
	finally:
		serverTCPSocket.close()

def connScan(tgtHost: str, tgtPort: int, scan: str = 'S'):
	srcPort = RandShort()

	if scan == 'S':
		flag = 'S'
	
	if scan == 'X':
		flag = 'FPU'

	try:
		pkt = sr1(IP(dst=tgtHost)/TCP(sport=srcPort, dport=tgtPort, flags=flag), timeout=2, verbose=0)
		if pkt != None:
			if pkt.haslayer(TCP):
				if pkt.getlayer(TCP).flags == 0x14:
					print(f'[-] {tgtPort}/TCP CLOSED')
				elif pkt.getlayer(TCP).flags == 0x12:
					print(f'[+] {tgtPort}/TCP \tOPEN')
				else:
					print(f'[+] {tgtPort}/TCP \tFILTERED')
			elif pkt.haslayer(ICMP):
				print(f'[+] {tgtPort}/ICMP \tRESP|FILTERED')
			else:
				print(f'[+] {tgtPort}/TCP \tUNKNOWN RESP')
		else:
			try:
				pkt = sr1(IP(dst=tgtHost)/UDP(sport=srcPort, dport=tgtPort), timeout=2, verbose=0)
				if pkt == None:
					print(f'[+] {tgtPort}/UDP \tOPEN|FILTERED')
				else:
					if pkt.haslayer(ICMP):
						print(f'[-] {tgtPort}/UDP CLOSED')
					elif pkt.haslayer(UDP):
						print(f'[+] {tgtPort}/UDP \tOPEN|FILTERED')
					else:
						print(f'[+] {tgtPort}/UDP \tUNKNOWN RESP')
			except Exception as udpE:
				print(f'[-] {tgtPort}/UDP CLOSED | Reason: {udpE}')
	except Exception as tcpE:
		print(f'[-] {tgtPort}/TCP CLOSED | Reason: {tcpE}')

def portScan(tgtHost: str, tgtPorts: str):
	try:
		tgtIP = socket.gethostbyname(tgtHost)
		icmp = IP(dst=tgtIP)/ICMP()
		resp = sr1(icmp, timeout=5, verbose=0)
		print(f'[+] Scan Results For: {tgtIP}')
	except Exception as e:
		print(f'[-] Cannot resolve {tgtHost}: Unknown Host Due To {e}')
		exit(0)

	socket.setdefaulttimeout(2)
	with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
		for tgtPort in tgtPorts:
			future_one = executor.submit(connScan, tgtHost, int(tgtPort))
			future_two = executor.submit(grabBanner, tgtHost, int(tgtPort))

def main():
	parser = argparse.ArgumentParser(usage='Usage of scanner: --H <target host> --P <target port(s)>')
	parser.add_argument('--H', dest='tgtHost', type=str, help='specify target host')
	parser.add_argument('--P', dest='tgtPorts', type=str, help='specify target port(s) seperated by comma')
	args = parser.parse_args()
	tgtHost = args.tgtHost
	tgtPorts = str(args.tgtPorts).split(',')
	if (tgtHost == None) | (tgtPorts[0] == 'None'):
		print(parser.usage)
		exit(0)
	portScan(tgtHost, tgtPorts)

if __name__ == '__main__':
	main()